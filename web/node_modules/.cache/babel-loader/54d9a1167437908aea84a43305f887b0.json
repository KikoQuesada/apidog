{"ast":null,"code":"export const googleAutocomplete = async (text) => new Promise((resolve, reject) => {\n  if (!text) {\n    return reject(\"Need valid text input\");\n  }\n\n  if (typeof window === \"undefined\") {\n    return reject(\"Need valid window object\");\n  }\n\n  try {\n    const geocoder = new window.google.maps.Geocoder();\n    const service = new window.google.maps.places.AutocompleteService();\n    const request = {\n      input: text,\n      componentRestrictions: {\n        country: \"es\"\n      }\n    };\n    service.getPlacePredictions(request);\n    /* .then(prediction => {\r\n     return prediction.map(item => {\r\n        geocoder.geocode({'placeId': item.place_id})\r\n          .then(geocode => {\r\n            return {\r\n              ...item,\r\n              geocode\r\n            }\r\n          })\r\n      })\r\n    })\r\n    */\n\n    /* new window.google.maps.places.AutocompleteService().getPlacePredictions(\r\n      { input: text, componentRestrictions: { country: \"es\" } },\r\n      resolve\r\n    ) */\n  } catch (e) {\n    reject(e);\n  }\n});","map":{"version":3,"sources":["C:/Users/faque/Desktop/Ironhack/Proyecto-modulo-3/APIDOG/web/src/services/google-autocomplete-service.js"],"names":["googleAutocomplete","text","Promise","resolve","reject","window","geocoder","google","maps","Geocoder","service","places","AutocompleteService","request","input","componentRestrictions","country","getPlacePredictions","e"],"mappings":"AAAA,OAAO,MAAMA,kBAAkB,GAAG,OAAMC,IAAN,KAChC,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B,MAAI,CAACH,IAAL,EAAW;AACT,WAAOG,MAAM,CAAC,uBAAD,CAAb;AACD;;AAGD,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAOD,MAAM,CAAC,0BAAD,CAAb;AACD;;AAED,MAAI;AACF,UAAME,QAAQ,GAAG,IAAID,MAAM,CAACE,MAAP,CAAcC,IAAd,CAAmBC,QAAvB,EAAjB;AAEA,UAAMC,OAAO,GAAG,IAAIL,MAAM,CAACE,MAAP,CAAcC,IAAd,CAAmBG,MAAnB,CAA0BC,mBAA9B,EAAhB;AACA,UAAMC,OAAO,GAAG;AAAEC,MAAAA,KAAK,EAAEb,IAAT;AAAec,MAAAA,qBAAqB,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX;AAAtC,KAAhB;AACAN,IAAAA,OAAO,CAACO,mBAAR,CAA4BJ,OAA5B;AACE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACM;AACN;AACA;AACA;AACK,GAtBD,CAsBE,OAAOK,CAAP,EAAU;AACVd,IAAAA,MAAM,CAACc,CAAD,CAAN;AACD;AACF,CAnCD,CADK","sourcesContent":["export const googleAutocomplete = async text =>\r\n  new Promise((resolve, reject) => {\r\n    if (!text) {\r\n      return reject(\"Need valid text input\")\r\n    }\r\n\r\n    \r\n    if (typeof window === \"undefined\") {\r\n      return reject(\"Need valid window object\")\r\n    }\r\n\r\n    try {\r\n      const geocoder = new window.google.maps.Geocoder();\r\n\r\n      const service = new window.google.maps.places.AutocompleteService();\r\n      const request = { input: text, componentRestrictions: { country: \"es\" } } \r\n      service.getPlacePredictions(request, ) \r\n        /* .then(prediction => {\r\n         return prediction.map(item => {\r\n            geocoder.geocode({'placeId': item.place_id})\r\n              .then(geocode => {\r\n                return {\r\n                  ...item,\r\n                  geocode\r\n                }\r\n              })\r\n          })\r\n        })\r\n */\r\n      /* new window.google.maps.places.AutocompleteService().getPlacePredictions(\r\n        { input: text, componentRestrictions: { country: \"es\" } },\r\n        resolve\r\n      ) */\r\n    } catch (e) {\r\n      reject(e)\r\n    }\r\n  })"]},"metadata":{},"sourceType":"module"}