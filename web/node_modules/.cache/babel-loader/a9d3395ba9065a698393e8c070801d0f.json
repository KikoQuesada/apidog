{"ast":null,"code":"export const googleAutocomplete = async (text) => new Promise((resolve, reject) => {\n  if (!text) {\n    return reject(\"Need valid text input\");\n  } // for use in things like GatsbyJS where the html is generated first\n\n\n  if (typeof window === \"undefined\") {\n    return reject(\"Need valid window object\");\n  }\n\n  try {\n    new window.google.maps.places.Autocomplete(autoCompleteRef.current, {\n      types: ['geocode'],\n      componentRestrictions: {\n        country: 'es'\n      }\n    });\n    /* AutocompleteService().getPlacePredictions(\r\n      { input: text, types: ['geocode'] ,componentRestrictions: { country: \"es\" } },\r\n      resolve\r\n    ) */\n  } catch (e) {\n    reject(e);\n  }\n});","map":{"version":3,"sources":["C:/Users/faque/Desktop/Ironhack/Proyecto-modulo-3/APIDOG/web/src/services/google-autocomplete-service.js"],"names":["googleAutocomplete","text","Promise","resolve","reject","window","google","maps","places","Autocomplete","autoCompleteRef","current","types","componentRestrictions","country","e"],"mappings":"AAAA,OAAO,MAAMA,kBAAkB,GAAG,OAAMC,IAAN,KAChC,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B,MAAI,CAACH,IAAL,EAAW;AACT,WAAOG,MAAM,CAAC,uBAAD,CAAb;AACD,GAH8B,CAK/B;;;AACA,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAOD,MAAM,CAAC,0BAAD,CAAb;AACD;;AAED,MAAI;AACF,QAAIC,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,MAAnB,CAA0BC,YAA9B,CAA2CC,eAAe,CAACC,OAA3D,EAAoE;AAClEC,MAAAA,KAAK,EAAE,CAAC,SAAD,CAD2D;AAElEC,MAAAA,qBAAqB,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX;AAF2C,KAApE;AAIA;AACN;AACA;AACA;AACK,GATD,CASE,OAAOC,CAAP,EAAU;AACVX,IAAAA,MAAM,CAACW,CAAD,CAAN;AACD;AACF,CAtBD,CADK","sourcesContent":["export const googleAutocomplete = async text =>\r\n  new Promise((resolve, reject) => {\r\n    if (!text) {\r\n      return reject(\"Need valid text input\")\r\n    }\r\n\r\n    // for use in things like GatsbyJS where the html is generated first\r\n    if (typeof window === \"undefined\") {\r\n      return reject(\"Need valid window object\")\r\n    }\r\n\r\n    try {\r\n      new window.google.maps.places.Autocomplete(autoCompleteRef.current, {\r\n        types: ['geocode'],\r\n        componentRestrictions: { country: 'es' },\r\n      });\r\n      /* AutocompleteService().getPlacePredictions(\r\n        { input: text, types: ['geocode'] ,componentRestrictions: { country: \"es\" } },\r\n        resolve\r\n      ) */\r\n    } catch (e) {\r\n      reject(e)\r\n    }\r\n  })"]},"metadata":{},"sourceType":"module"}