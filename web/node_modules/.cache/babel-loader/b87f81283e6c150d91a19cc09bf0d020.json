{"ast":null,"code":"export const googleAutocomplete = async (text) => new Promise((resolve, reject) => {\n  if (!text) {\n    return reject(\"Need valid text input\");\n  } // for use in things like GatsbyJS where the html is generated first\n\n\n  if (typeof window === \"undefined\") {\n    return reject(\"Need valid window object\");\n  }\n\n  try {\n    new window.google.maps.places.AutocompleteService().getPlacePredictions({\n      input: text\n    }, function (predictions, status) {\n      if (status == 'OK') {\n        geocoder.geocode({\n          'placeId': predictions[0].place_id\n        }, function (responses, status) {\n          if (status == 'OK') {\n            var lat = responses[0].geometry.location.lat();\n            var lng = responses[0].geometry.location.lng();\n            console.log(lat, lng);\n          }\n        });\n      }\n    });\n    /* getPlacePredictions(\r\n      { input: text, componentRestrictions: { country: \"es\" } },\r\n      resolve\r\n    ) */\n  } catch (e) {\n    reject(e);\n  }\n});","map":{"version":3,"sources":["C:/Users/faque/Desktop/Ironhack/Proyecto-modulo-3/APIDOG/web/src/services/google-autocomplete-service.js"],"names":["googleAutocomplete","text","Promise","resolve","reject","window","google","maps","places","AutocompleteService","getPlacePredictions","input","predictions","status","geocoder","geocode","place_id","responses","lat","geometry","location","lng","console","log","e"],"mappings":"AAEA,OAAO,MAAMA,kBAAkB,GAAG,OAAMC,IAAN,KAChC,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B,MAAI,CAACH,IAAL,EAAW;AACT,WAAOG,MAAM,CAAC,uBAAD,CAAb;AACD,GAH8B,CAK/B;;;AACA,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAOD,MAAM,CAAC,0BAAD,CAAb;AACD;;AAED,MAAI;AACF,QAAIC,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,MAAnB,CAA0BC,mBAA9B,GAAoDC,mBAApD,CAAwE;AAACC,MAAAA,KAAK,EAAEV;AAAR,KAAxE,EAAuF,UAAUW,WAAV,EAAuBC,MAAvB,EAA+B;AACpH,UAAGA,MAAM,IAAI,IAAb,EAAkB;AACdC,QAAAA,QAAQ,CAACC,OAAT,CAAiB;AACb,qBAAWH,WAAW,CAAC,CAAD,CAAX,CAAeI;AADb,SAAjB,EAGA,UAASC,SAAT,EAAoBJ,MAApB,EAA4B;AACxB,cAAIA,MAAM,IAAI,IAAd,EAAoB;AAChB,gBAAIK,GAAG,GAAGD,SAAS,CAAC,CAAD,CAAT,CAAaE,QAAb,CAAsBC,QAAtB,CAA+BF,GAA/B,EAAV;AACA,gBAAIG,GAAG,GAAGJ,SAAS,CAAC,CAAD,CAAT,CAAaE,QAAb,CAAsBC,QAAtB,CAA+BC,GAA/B,EAAV;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ,EAAiBG,GAAjB;AACH;AACJ,SATD;AAUH;AACJ,KAbC;AAcA;AACN;AACA;AACA;AACK,GAnBD,CAmBE,OAAOG,CAAP,EAAU;AACVpB,IAAAA,MAAM,CAACoB,CAAD,CAAN;AACD;AACF,CAhCD,CADK","sourcesContent":["\r\n\r\nexport const googleAutocomplete = async text =>\r\n  new Promise((resolve, reject) => {\r\n    if (!text) {\r\n      return reject(\"Need valid text input\")\r\n    }\r\n\r\n    // for use in things like GatsbyJS where the html is generated first\r\n    if (typeof window === \"undefined\") {\r\n      return reject(\"Need valid window object\")\r\n    }\r\n\r\n    try {\r\n      new window.google.maps.places.AutocompleteService().getPlacePredictions({input: text}, function (predictions, status) {\r\n        if(status == 'OK'){\r\n            geocoder.geocode({ \r\n                'placeId': predictions[0].place_id\r\n            }, \r\n            function(responses, status) {\r\n                if (status == 'OK') {\r\n                    var lat = responses[0].geometry.location.lat();\r\n                    var lng = responses[0].geometry.location.lng();\r\n                    console.log(lat, lng);\r\n                }\r\n            });\r\n        }\r\n    });\r\n      /* getPlacePredictions(\r\n        { input: text, componentRestrictions: { country: \"es\" } },\r\n        resolve\r\n      ) */\r\n    } catch (e) {\r\n      reject(e)\r\n    }\r\n  })"]},"metadata":{},"sourceType":"module"}