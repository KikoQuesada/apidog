{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { googleAutocomplete } from '../../';\nexport function usePlacesAutocomplete(text = \"\", debounceTimeout = 400) {\n  _s();\n\n  const [predictions, setPredictions] = useState([]);\n  useEffect(() => {\n    const handleDebounce = setTimeout(async () => {\n      try {\n        if (!text) {\n          return;\n        }\n\n        const nextPredictions = await googleAutocomplete(text);\n        setPredictions(nextPredictions);\n      } catch (e) {\n        console.error(e);\n      }\n    }, debounceTimeout);\n    return () => {\n      clearTimeout(handleDebounce);\n    };\n  }, [text, debounceTimeout]);\n  return predictions;\n}\n\n_s(usePlacesAutocomplete, \"zH5rPFTlWYOw2PPwe/kdtH2YoqI=\");","map":{"version":3,"sources":["C:/Users/faque/Desktop/Ironhack/Proyecto-modulo-3/APIDOG/web/src/components/shared/UsePlacesAutocomplete.js"],"names":["useState","useEffect","googleAutocomplete","usePlacesAutocomplete","text","debounceTimeout","predictions","setPredictions","handleDebounce","setTimeout","nextPredictions","e","console","error","clearTimeout"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,SAASC,kBAAT,QAAmC,QAAnC;AAEA,OAAO,SAASC,qBAAT,CAA+BC,IAAI,GAAG,EAAtC,EAA0CC,eAAe,GAAG,GAA5D,EAAiE;AAAA;;AACtE,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,EAAD,CAA9C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMO,cAAc,GAAGC,UAAU,CAAC,YAAY;AAC5C,UAAI;AACF,YAAI,CAACL,IAAL,EAAW;AACT;AACD;;AAED,cAAMM,eAAe,GAAG,MAAMR,kBAAkB,CAACE,IAAD,CAAhD;AACAG,QAAAA,cAAc,CAACG,eAAD,CAAd;AACD,OAPD,CAOE,OAAOC,CAAP,EAAU;AACVC,QAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACD;AACF,KAXgC,EAW9BN,eAX8B,CAAjC;AAaA,WAAO,MAAM;AACXS,MAAAA,YAAY,CAACN,cAAD,CAAZ;AACD,KAFD;AAGD,GAjBQ,EAiBN,CAACJ,IAAD,EAAOC,eAAP,CAjBM,CAAT;AAmBA,SAAOC,WAAP;AACD;;GAvBeH,qB","sourcesContent":["import { useState, useEffect } from \"react\"\r\n\r\nimport { googleAutocomplete } from '../../';\r\n\r\nexport function usePlacesAutocomplete(text = \"\", debounceTimeout = 400) {\r\n  const [predictions, setPredictions] = useState([])\r\n\r\n  useEffect(() => {\r\n    const handleDebounce = setTimeout(async () => {\r\n      try {\r\n        if (!text) {\r\n          return\r\n        }\r\n\r\n        const nextPredictions = await googleAutocomplete(text)\r\n        setPredictions(nextPredictions)\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n    }, debounceTimeout)\r\n\r\n    return () => {\r\n      clearTimeout(handleDebounce)\r\n    }\r\n  }, [text, debounceTimeout])\r\n\r\n  return predictions\r\n}"]},"metadata":{},"sourceType":"module"}