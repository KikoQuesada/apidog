{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\faque\\\\Desktop\\\\Ironhack\\\\Proyecto-modulo-3\\\\APIDOG\\\\web\\\\src\\\\components\\\\users\\\\user-form\\\\UserForm.js\",\n    _s = $RefreshSig$();\n\nimport './UserForm.css';\nimport { useState } from 'react';\nimport userService from '../../../services/users-service';\nimport { useHistory } from 'react-router';\nimport usePlacesAutocomplete from '../../shared/UsePlacesAutocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EMAIL_PATTERN = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\nconst PASSWORD_PATTERN = /^.{8,}$/;\nconst validations = {\n  name: value => {\n    let message;\n\n    if (!value) {\n      message = 'A name is required';\n    } else if (value.length < 3) {\n      message = 'Name needs at least 3 chars';\n    } else if (value.length > 50) {\n      message = 'Name needs at most 50 chars';\n    }\n\n    return message;\n  },\n  lastName: value => {\n    let message;\n\n    if (!value) {\n      message = 'A last name is required';\n    } else if (value > 50) {\n      message = 'The last name cant be greater than 50 chars';\n    }\n\n    return message;\n  },\n  email: value => {\n    let message;\n\n    if (!value) {\n      message = 'A valid email is required';\n    } else if (!EMAIL_PATTERN.test(value)) {\n      message = 'The email is invalid';\n    }\n\n    return message;\n  },\n  password: value => {\n    let message;\n\n    if (!value) {\n      message = 'A valid password is required';\n    } else if (!PASSWORD_PATTERN.test(value)) {\n      message = 'The password needs at least 8 chars';\n    }\n\n    return message;\n  }\n};\n\nfunction UserForm() {\n  _s();\n\n  const history = useHistory();\n  const [state, setState] = useState({\n    user: {\n      name: '',\n      avatar: '',\n      email: '',\n      city: [],\n      password: '',\n      rol: 'adopter'\n    },\n    touch: {},\n    errors: {\n      name: validations.name(),\n      email: validations.email(),\n      phone: validations.phone(),\n      cif: validations.cif(),\n      contact: validations.contact(),\n      description: validations.description(),\n      password: validations.password()\n    }\n  });\n  const [selectedPrediction, setSelectedPrediction] = useState(null);\n  const [searchValue, setSearchValue] = useState(\"\");\n  const {\n    predictions,\n    setPredictions\n  } = usePlacesAutocomplete(searchValue);\n\n  const handlePredictionSelection = (e, prediction) => {\n    const geocoder = new window.google.maps.Geocoder();\n    geocoder.geocode({\n      'placeId': prediction.place_id\n    }, function (responses, status) {\n      console.log(responses);\n\n      if (status == 'OK') {\n        var lat = responses[0].geometry.location.lat();\n        var lng = responses[0].geometry.location.lng();\n        const newState = { ...state,\n          shelter: { ...state.shelter,\n            city: [Number(lat), Number(lng)]\n          }\n        };\n        setState(newState);\n      }\n    });\n    e.preventDefault();\n    setSelectedPrediction(prediction);\n    setPredictions();\n  };\n\n  const handleChange = event => {\n    let {\n      name,\n      value\n    } = event.target;\n\n    if (event.target.file) {\n      value = event.target.files[0];\n    }\n\n    setState(state => ({ ...state,\n      shelter: { ...state.shelter,\n        [name]: value\n      },\n      errors: { ...state.errors,\n        [name]: validations[name] && validations[name](value)\n      }\n    }));\n  };\n\n  const handleBlur = event => {\n    const {\n      name\n    } = event.target;\n    setState(state => ({ ...state,\n      touch: { ...state.touch,\n        [name]: true\n      }\n    }));\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    console.log('ENTRA', state);\n    console.log('ENTRA');\n    const {\n      shelter\n    } = state;\n    shelterService.register(shelter).then(shelter => {\n      setState(shelter);\n      history.push('/login');\n    }).catch(error => {\n      const {\n        message,\n        errors\n      } = error && error.response ? error.response.data : error;\n      console.error(message);\n      setState(state => ({ ...state,\n        errors: errors\n      }));\n    });\n  };\n\n  const isValid = () => {\n    const {\n      errors\n    } = state;\n    return Object.keys(errors).some(error => errors[error]);\n  };\n\n  const {\n    shelter,\n    errors,\n    touch\n  } = state;\n  return /*#__PURE__*/_jsxDEV(\"h2\", {\n    className: \"text-center mb-5 fw-bold\",\n    children: \"Just a few info to create your Account\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 9\n  }, this)\n  /* <div className=\"container\">\r\n      <h2 className=\"text-center mb-5 fw-bold\">Just a few info to create your Account</h2>\r\n      <div className=\"row justify-content-center\">\r\n      <div className=\"col-2\">\r\n          <img className=\"shelter-avatar-container\" alt='shelter' src={shelter.avatar ? shelter.avatar: 'https://res.cloudinary.com/getapet/image/upload/v1617970328/default_avatar_xnnmwl.png'} />\r\n      </div>\r\n          <form onSubmit={handleSubmit} className=\"col-6 shadow register-container\">\r\n              <div className=\"input-group mb-4 d-flex align-items-end\">\r\n                  <span><i className=\"fas fa-user fa-lg me-3\"></i></span>\r\n                  <input name=\"name\" type=\"text\" value={shelter.name} onChange={handleChange} onBlur={handleBlur} placeholder=\"Name of your shelter\" className={`form-control form-control-underlined border-primary ${touch.name && errors.name ? 'is-invalid' : ''}`}/>\r\n                  <div className=\"invalid-feedback\">{errors.name}</div>\r\n              </div>\r\n                <div className=\"input-group mb-4 d-flex align-items-end\">\r\n                  <span><i className=\"fas fa-envelope fa-lg me-3\"></i></span>\r\n                  <input name=\"email\" type=\"text\" value={shelter.email} onChange={handleChange} onBlur={handleBlur} placeholder=\"Email of your shelter\" className={`form-control form-control-underlined border-primary ${touch.email && errors.email ? 'is-invalid' : ''}`}/>\r\n                  <div className=\"invalid-feedback\">{errors.email}</div>\r\n              </div>\r\n                <div className=\"input-group mb-4 d-flex align-items-end\">\r\n                  <span><i className=\"fas fa-phone fa-lg me-3\"></i></span>\r\n                  <input name=\"phone\" type=\"text\" value={shelter.phone} onChange={handleChange} onBlur={handleBlur} placeholder=\"Phone number of your shelter\" className={`form-control form-control-underlined border-primary ${touch.phone && errors.phone ? 'is-invalid' : ''}`}/>\r\n                  <div className=\"invalid-feedback\">{errors.phone}</div>\r\n              </div>\r\n                <div className=\"input-group mb-4 d-flex align-items-end\">\r\n                  <span><i className=\"fas fa-check-circle fa-lg me-3\"></i></span>\r\n                  <input name=\"cif\" type=\"text\" value={shelter.cif} onChange={handleChange} onBlur={handleBlur} placeholder=\"CIF/NIE of your shelter\" className={`form-control form-control-underlined border-primary ${touch.cif && errors.cif ? 'is-invalid' : ''}`}/>\r\n                  <div className=\"invalid-feedback\">{errors.cif}</div>\r\n              </div>\r\n                <div className=\"input-group mb-4 d-flex align-items-end\">\r\n                  <span><i className=\"fas fa-address-book fa-lg me-3\"></i></span>\r\n                  <input name=\"contact\" type=\"text\" value={shelter.contact} onChange={handleChange} onBlur={handleBlur} placeholder=\"Contact person of your shelter\" className={`form-control form-control-underlined border-primary ${touch.contact && errors.contact ? 'is-invalid' : ''}`}/>\r\n                  <div className=\"invalid-feedback\">{errors.contact}</div>\r\n              </div>\r\n                <div className=\"input-group mb-4 d-flex align-items-center\">\r\n                  <span><i className=\"fas fa-lock fa-lg me-3\"></i></span>\r\n                  <input type=\"password\" name=\"password\" value={shelter.password} onChange={handleChange} onBlur={handleBlur} placeholder=\"Enter your password\" className={`form-control form-control-underlined border-primary ${touch.password && errors.password ? 'is-invalid' : ''}`}/>\r\n                  <div className=\"invalid-feedback\">{errors.password}</div>\r\n              </div>\r\n              <div className=\"input-group mb-4 d-flex align-items-center\">\r\n                  <span><i className=\"fas fa-map-marker-alt fa-lg me-3\"></i></span>\r\n                  <input name=\"predictionSearch\" autoComplete='off' value={selectedPrediction?.description} onChange={e => setSearchValue(e.target.value)}/>\r\n                  <ul className='row google-list'>\r\n                      {predictions?.map(prediction => (\r\n                          <li key={prediction?.place_id}>\r\n                              <button className=\"google-btn-predictions\" onClick={e => handlePredictionSelection(e, prediction)} onKeyDown={e => handlePredictionSelection(e, prediction)}>\r\n                                  {prediction?.structured_formatting?.main_text || \"Not found\"}\r\n                              </button>\r\n                          </li>\r\n                      ))}\r\n                   </ul>\r\n              </div>\r\n              <div className=\"input-group mb-4 d-flex align-items-center\">\r\n                  <span><i className=\"fas fa-edit fa-lg me-3\"></i></span>\r\n                  <textarea rows='4' type=\"text\" name=\"description\" value={shelter.description} onChange={handleChange} onBlur={handleBlur} placeholder=\"Shelter description\" className={`form-control form-control-underlined border-primary ${touch.description && errors.description ? 'is-invalid' : ''}`}/>\r\n                  <div className=\"invalid-feedback\">{errors.description}</div>\r\n              </div>\r\n                <div className=\"input-group mb-4 d-flex align-items-center\">\r\n                  <span><i className=\"fas fa-cloud-upload-alt fa-lg me-3\"></i></span>\r\n                  <input name=\"avatar\" type=\"file\"  onChange={handleChange} onBlur={handleBlur} placeholder=\"Shelter logo\" className={`form-control form-control-underlined border-primary ${touch.avatar && errors.avatar ? 'is-invalid' : ''}`}/>\r\n                  <span></span>\r\n                  <div className=\"invalid-feedback\">{errors.avatar}</div>\r\n              </div>\r\n                <button className=\"btn create-shelter-btn\" type=\"submit\" disabled={isValid()}><i className=\"fas fa-plus\"></i> Register Shelter</button>\r\n          </form>\r\n      </div>\r\n      \r\n  </div> */\n  ;\n}\n\n_s(UserForm, \"E21r01Axgckx78q+LZ1+fqH0d8E=\", false, function () {\n  return [useHistory, usePlacesAutocomplete];\n});\n\n_c = UserForm;\nexport default UserForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserForm\");","map":{"version":3,"sources":["C:/Users/faque/Desktop/Ironhack/Proyecto-modulo-3/APIDOG/web/src/components/users/user-form/UserForm.js"],"names":["useState","userService","useHistory","usePlacesAutocomplete","EMAIL_PATTERN","PASSWORD_PATTERN","validations","name","value","message","length","lastName","email","test","password","UserForm","history","state","setState","user","avatar","city","rol","touch","errors","phone","cif","contact","description","selectedPrediction","setSelectedPrediction","searchValue","setSearchValue","predictions","setPredictions","handlePredictionSelection","e","prediction","geocoder","window","google","maps","Geocoder","geocode","place_id","responses","status","console","log","lat","geometry","location","lng","newState","shelter","Number","preventDefault","handleChange","event","target","file","files","handleBlur","handleSubmit","shelterService","register","then","push","catch","error","response","data","isValid","Object","keys","some"],"mappings":"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","sourcesContent":["import './UserForm.css'\r\nimport { useState } from 'react';\r\nimport userService from '../../../services/users-service';\r\nimport { useHistory } from 'react-router';\r\nimport usePlacesAutocomplete from '../../shared/UsePlacesAutocomplete';\r\nconst EMAIL_PATTERN = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\nconst PASSWORD_PATTERN = /^.{8,}$/;\r\n\r\nconst validations = {\r\n    name: (value) => {\r\n        let message;\r\n        if (!value) {\r\n            message = 'A name is required';\r\n        } else if (value.length < 3) {\r\n            message = 'Name needs at least 3 chars'\r\n        } else if (value.length > 50) {\r\n            message = 'Name needs at most 50 chars'\r\n        }\r\n        return message;\r\n    },\r\n    lastName: (value) => {\r\n        let message;\r\n        if (!value) {\r\n            message = 'A last name is required'\r\n        } else if (value > 50) {\r\n            message = 'The last name cant be greater than 50 chars'\r\n        }\r\n        return message;\r\n    },\r\n    email: (value) => {\r\n        let message;\r\n        if(!value) {\r\n            message = 'A valid email is required'\r\n        } else if (!EMAIL_PATTERN.test(value)) {\r\n            message = 'The email is invalid'\r\n        }\r\n        return message;\r\n    },\r\n    password: (value) => {\r\n        let message;\r\n        if(!value) {\r\n            message = 'A valid password is required'\r\n        } else if (!PASSWORD_PATTERN.test(value)) {\r\n            message = 'The password needs at least 8 chars'\r\n        }\r\n        return message;\r\n    },\r\n}\r\n\r\n\r\nfunction UserForm() {\r\n\r\n\r\n    const history = useHistory();\r\n\r\n    const [state, setState] = useState({\r\n        user: {\r\n            name: '',\r\n            avatar: '',\r\n            email: '',\r\n            city: [],\r\n            password: '',\r\n            rol: 'adopter'\r\n        },\r\n        touch: {},\r\n        errors: {\r\n            name: validations.name(),\r\n            email: validations.email(),\r\n            phone: validations.phone(),\r\n            cif: validations.cif(),\r\n            contact: validations.contact(),\r\n            description: validations.description(),\r\n            password: validations.password(),\r\n        }\r\n    });\r\n\r\n    const [selectedPrediction, setSelectedPrediction] = useState(null)\r\n    const [searchValue, setSearchValue] = useState(\"\")\r\n    const {predictions, setPredictions} = usePlacesAutocomplete(searchValue)\r\n\r\n    const handlePredictionSelection = (e, prediction) => {\r\n        const geocoder = new window.google.maps.Geocoder();\r\n        geocoder.geocode({ \r\n            'placeId': prediction.place_id\r\n        }, \r\n        function(responses, status) {\r\n            console.log(responses)\r\n            if (status == 'OK') {\r\n                var lat = responses[0].geometry.location.lat();\r\n                var lng = responses[0].geometry.location.lng();\r\n                const newState = {\r\n                    ...state,\r\n                    shelter: {\r\n                        ...state.shelter,\r\n                        city: [Number(lat), Number(lng)]\r\n                    }\r\n                }\r\n                setState(newState)\r\n            }\r\n        });\r\n        e.preventDefault()\r\n        setSelectedPrediction(prediction)\r\n        setPredictions()\r\n      }\r\n\r\n    const handleChange = (event) => {\r\n        let { name, value } = event.target;\r\n\r\n        if (event.target.file) {\r\n            value = event.target.files[0]\r\n        }\r\n\r\n\r\n        setState(state => ({\r\n            ...state,\r\n            shelter: {\r\n                ...state.shelter,\r\n                [name]: value\r\n            },\r\n            errors: {\r\n                ...state.errors,\r\n                [name]: validations[name] && validations[name](value)\r\n            }\r\n        }));\r\n    }\r\n\r\n    const handleBlur = (event) => {\r\n        const { name } = event.target;\r\n        setState(state => ({\r\n            ...state,\r\n            touch: {\r\n                ...state.touch,\r\n                [name]: true\r\n            }\r\n        }));\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        console.log('ENTRA', state)\r\n        \r\n           console.log('ENTRA')\r\n            const { shelter } = state;\r\n            shelterService.register(shelter)\r\n            .then(shelter => {\r\n                setState(shelter)\r\n                history.push('/login')\r\n            })\r\n            .catch(error => {\r\n                const { message, errors } = error && error.response ? error.response.data : error;\r\n                console.error(message);\r\n\r\n                setState(state => ({\r\n                    ...state,\r\n                    errors: errors\r\n                }))\r\n            })         \r\n        \r\n    }\r\n\r\n    const isValid = () => {\r\n        const { errors } = state;\r\n        return Object.keys(errors).some(error => errors[error]);\r\n    }\r\n\r\n    const { shelter, errors, touch } = state;\r\n\r\n\r\n\r\n    return (\r\n        <h2 className=\"text-center mb-5 fw-bold\">Just a few info to create your Account</h2>\r\n        /* <div className=\"container\">\r\n            <h2 className=\"text-center mb-5 fw-bold\">Just a few info to create your Account</h2>\r\n            <div className=\"row justify-content-center\">\r\n            <div className=\"col-2\">\r\n                <img className=\"shelter-avatar-container\" alt='shelter' src={shelter.avatar ? shelter.avatar: 'https://res.cloudinary.com/getapet/image/upload/v1617970328/default_avatar_xnnmwl.png'} />\r\n            </div>\r\n                <form onSubmit={handleSubmit} className=\"col-6 shadow register-container\">\r\n                    <div className=\"input-group mb-4 d-flex align-items-end\">\r\n                        <span><i className=\"fas fa-user fa-lg me-3\"></i></span>\r\n                        <input name=\"name\" type=\"text\" value={shelter.name} onChange={handleChange} onBlur={handleBlur} placeholder=\"Name of your shelter\" className={`form-control form-control-underlined border-primary ${touch.name && errors.name ? 'is-invalid' : ''}`}/>\r\n                        <div className=\"invalid-feedback\">{errors.name}</div>\r\n                    </div>\r\n\r\n                    <div className=\"input-group mb-4 d-flex align-items-end\">\r\n                        <span><i className=\"fas fa-envelope fa-lg me-3\"></i></span>\r\n                        <input name=\"email\" type=\"text\" value={shelter.email} onChange={handleChange} onBlur={handleBlur} placeholder=\"Email of your shelter\" className={`form-control form-control-underlined border-primary ${touch.email && errors.email ? 'is-invalid' : ''}`}/>\r\n                        <div className=\"invalid-feedback\">{errors.email}</div>\r\n                    </div>\r\n\r\n                    <div className=\"input-group mb-4 d-flex align-items-end\">\r\n                        <span><i className=\"fas fa-phone fa-lg me-3\"></i></span>\r\n                        <input name=\"phone\" type=\"text\" value={shelter.phone} onChange={handleChange} onBlur={handleBlur} placeholder=\"Phone number of your shelter\" className={`form-control form-control-underlined border-primary ${touch.phone && errors.phone ? 'is-invalid' : ''}`}/>\r\n                        <div className=\"invalid-feedback\">{errors.phone}</div>\r\n                    </div>\r\n\r\n                    <div className=\"input-group mb-4 d-flex align-items-end\">\r\n                        <span><i className=\"fas fa-check-circle fa-lg me-3\"></i></span>\r\n                        <input name=\"cif\" type=\"text\" value={shelter.cif} onChange={handleChange} onBlur={handleBlur} placeholder=\"CIF/NIE of your shelter\" className={`form-control form-control-underlined border-primary ${touch.cif && errors.cif ? 'is-invalid' : ''}`}/>\r\n                        <div className=\"invalid-feedback\">{errors.cif}</div>\r\n                    </div>\r\n\r\n                    <div className=\"input-group mb-4 d-flex align-items-end\">\r\n                        <span><i className=\"fas fa-address-book fa-lg me-3\"></i></span>\r\n                        <input name=\"contact\" type=\"text\" value={shelter.contact} onChange={handleChange} onBlur={handleBlur} placeholder=\"Contact person of your shelter\" className={`form-control form-control-underlined border-primary ${touch.contact && errors.contact ? 'is-invalid' : ''}`}/>\r\n                        <div className=\"invalid-feedback\">{errors.contact}</div>\r\n                    </div>\r\n\r\n                    <div className=\"input-group mb-4 d-flex align-items-center\">\r\n                        <span><i className=\"fas fa-lock fa-lg me-3\"></i></span>\r\n                        <input type=\"password\" name=\"password\" value={shelter.password} onChange={handleChange} onBlur={handleBlur} placeholder=\"Enter your password\" className={`form-control form-control-underlined border-primary ${touch.password && errors.password ? 'is-invalid' : ''}`}/>\r\n                        <div className=\"invalid-feedback\">{errors.password}</div>\r\n                    </div>\r\n                    <div className=\"input-group mb-4 d-flex align-items-center\">\r\n                        <span><i className=\"fas fa-map-marker-alt fa-lg me-3\"></i></span>\r\n                        <input name=\"predictionSearch\" autoComplete='off' value={selectedPrediction?.description} onChange={e => setSearchValue(e.target.value)}/>\r\n                        <ul className='row google-list'>\r\n                            {predictions?.map(prediction => (\r\n                                <li key={prediction?.place_id}>\r\n                                    <button className=\"google-btn-predictions\" onClick={e => handlePredictionSelection(e, prediction)} onKeyDown={e => handlePredictionSelection(e, prediction)}>\r\n                                        {prediction?.structured_formatting?.main_text || \"Not found\"}\r\n                                    </button>\r\n                                </li>\r\n                            ))}\r\n                         </ul>\r\n                    </div>\r\n                    <div className=\"input-group mb-4 d-flex align-items-center\">\r\n                        <span><i className=\"fas fa-edit fa-lg me-3\"></i></span>\r\n                        <textarea rows='4' type=\"text\" name=\"description\" value={shelter.description} onChange={handleChange} onBlur={handleBlur} placeholder=\"Shelter description\" className={`form-control form-control-underlined border-primary ${touch.description && errors.description ? 'is-invalid' : ''}`}/>\r\n                        <div className=\"invalid-feedback\">{errors.description}</div>\r\n                    </div>\r\n\r\n                    <div className=\"input-group mb-4 d-flex align-items-center\">\r\n                        <span><i className=\"fas fa-cloud-upload-alt fa-lg me-3\"></i></span>\r\n                        <input name=\"avatar\" type=\"file\"  onChange={handleChange} onBlur={handleBlur} placeholder=\"Shelter logo\" className={`form-control form-control-underlined border-primary ${touch.avatar && errors.avatar ? 'is-invalid' : ''}`}/>\r\n                        <span></span>\r\n                        <div className=\"invalid-feedback\">{errors.avatar}</div>\r\n                    </div>\r\n\r\n                    <button className=\"btn create-shelter-btn\" type=\"submit\" disabled={isValid()}><i className=\"fas fa-plus\"></i> Register Shelter</button>\r\n                </form>\r\n            </div>\r\n            \r\n        </div> */\r\n    );\r\n}\r\n\r\nexport default UserForm;"]},"metadata":{},"sourceType":"module"}