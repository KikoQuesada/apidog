{"ast":null,"code":"export const googleAutocomplete = async (text) => new Promise((resolve, reject) => {\n  if (!text) {\n    return reject(\"Need valid text input\");\n  }\n\n  if (typeof window === \"undefined\") {\n    return reject(\"Need valid window object\");\n  }\n\n  try {\n    const geocoder = new window.google.maps.Geocoder();\n    const service = new window.google.maps.places.AutocompleteService();\n    const request = {\n      input: text\n    };\n    service.getPlacePredictions(request, function (predictions, status) {\n      if (status == 'OK') {\n        geocoder.geocode({\n          'placeId': predictions[0].place_id\n        }, function (responses, status) {\n          if (status == 'OK') {\n            const lat = responses[0].geometry.location.lat();\n            const lng = responses[0].geometry.location.lng();\n            console.log(lat, lng);\n          }\n        });\n      }\n    });\n    /* new window.google.maps.places.AutocompleteService().getPlacePredictions(\r\n      { input: text, componentRestrictions: { country: \"es\" } },\r\n      resolve\r\n    ) */\n  } catch (e) {\n    reject(e);\n  }\n});","map":{"version":3,"sources":["C:/Users/faque/Desktop/Ironhack/Proyecto-modulo-3/APIDOG/web/src/services/google-autocomplete-service.js"],"names":["googleAutocomplete","text","Promise","resolve","reject","window","geocoder","google","maps","Geocoder","service","places","AutocompleteService","request","input","getPlacePredictions","predictions","status","geocode","place_id","responses","lat","geometry","location","lng","console","log","e"],"mappings":"AAAA,OAAO,MAAMA,kBAAkB,GAAG,OAAMC,IAAN,KAChC,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B,MAAI,CAACH,IAAL,EAAW;AACT,WAAOG,MAAM,CAAC,uBAAD,CAAb;AACD;;AAGD,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAOD,MAAM,CAAC,0BAAD,CAAb;AACD;;AAED,MAAI;AACF,UAAME,QAAQ,GAAG,IAAID,MAAM,CAACE,MAAP,CAAcC,IAAd,CAAmBC,QAAvB,EAAjB;AAEA,UAAMC,OAAO,GAAG,IAAIL,MAAM,CAACE,MAAP,CAAcC,IAAd,CAAmBG,MAAnB,CAA0BC,mBAA9B,EAAhB;AACA,UAAMC,OAAO,GAAG;AAAEC,MAAAA,KAAK,EAAEb;AAAT,KAAhB;AACAS,IAAAA,OAAO,CAACK,mBAAR,CAA4BF,OAA5B,EAAqC,UAAUG,WAAV,EAAuBC,MAAvB,EAA+B;AAChE,UAAGA,MAAM,IAAI,IAAb,EAAkB;AAChBX,QAAAA,QAAQ,CAACY,OAAT,CAAiB;AACjB,qBAAWF,WAAW,CAAC,CAAD,CAAX,CAAeG;AADT,SAAjB,EAGJ,UAASC,SAAT,EAAoBH,MAApB,EAA4B;AACxB,cAAIA,MAAM,IAAI,IAAd,EAAoB;AAChB,kBAAMI,GAAG,GAAGD,SAAS,CAAC,CAAD,CAAT,CAAaE,QAAb,CAAsBC,QAAtB,CAA+BF,GAA/B,EAAZ;AACA,kBAAMG,GAAG,GAAGJ,SAAS,CAAC,CAAD,CAAT,CAAaE,QAAb,CAAsBC,QAAtB,CAA+BC,GAA/B,EAAZ;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ,EAAiBG,GAAjB;AAEH;AACJ,SAVG;AAWP;AACJ,KAdK;AAgBA;AACN;AACA;AACA;AACK,GAzBD,CAyBE,OAAOG,CAAP,EAAU;AACVvB,IAAAA,MAAM,CAACuB,CAAD,CAAN;AACD;AACF,CAtCD,CADK","sourcesContent":["export const googleAutocomplete = async text =>\r\n  new Promise((resolve, reject) => {\r\n    if (!text) {\r\n      return reject(\"Need valid text input\")\r\n    }\r\n\r\n    \r\n    if (typeof window === \"undefined\") {\r\n      return reject(\"Need valid window object\")\r\n    }\r\n\r\n    try {\r\n      const geocoder = new window.google.maps.Geocoder();\r\n\r\n      const service = new window.google.maps.places.AutocompleteService();\r\n      const request = { input: text };\r\n      service.getPlacePredictions(request, function (predictions, status) {\r\n          if(status == 'OK'){\r\n            geocoder.geocode({ \r\n            'placeId': predictions[0].place_id\r\n        }, \r\n        function(responses, status) {\r\n            if (status == 'OK') {\r\n                const lat = responses[0].geometry.location.lat();\r\n                const lng = responses[0].geometry.location.lng();\r\n                console.log(lat, lng);\r\n                \r\n            }\r\n        });\r\n    }\r\n});\r\n\r\n      /* new window.google.maps.places.AutocompleteService().getPlacePredictions(\r\n        { input: text, componentRestrictions: { country: \"es\" } },\r\n        resolve\r\n      ) */\r\n    } catch (e) {\r\n      reject(e)\r\n    }\r\n  })"]},"metadata":{},"sourceType":"module"}